WITH TriggerCandidate as (    SELECT      [assignment].WorkFlowAssignmentId,     CAST(CASE WHEN [member].MemberId = 0 THEN 1 ELSE 0 END AS BIT) IsMemberGeneric,     [assignment].MemberNameToken,     [assignment].WorkFlowId,     [workflow].WorkFlowName,     [member].Name as [MemberName],     [assignment].IsScheduled,     [assignment].IsEventTriggered,     [workflow].ProductId     FROM [CDA].[WorkFlow].[WorkFlowAssignment] (nolock) AS [assignment]    LEFT JOIN [CDA].[WorkFlow].[WorkFlow] (nolock) AS [workflow] ON [assignment].[WorkFlowId] = [workflow].[WorkFlowId]    LEFT JOIN [CDA].[dbo].[Member] (nolock) AS [member] on [assignment].[MemberId] = [member].[MemberId]    LEFT JOIN [CDA].[WorkFlow].[WorkFlowExecutionDetail] (nolock) AS [execution] ON [execution].[WorkFlowAssignmentId] = [assignment].[WorkFlowAssignmentId] AND [execution].[WorkFlowStatusType] NOT IN (1, 2 ,3 ,4, 7)    WHERE     ([assignment].[IsDeleted] <> 1)      AND ([assignment].[IsEventTriggered] = 1)      AND ([workflow].[IsActive] = 1)     AND ([workflow].[IsDeleted] <> 1)      AND ([assignment].[IsDeleted] <> 1)      AND ([member].[IsDeleted] <> 1)     AND [execution].[WorkFlowExecutionDetailId] IS NULL -- not currently running     AND (EXISTS(      SELECT 1 AS [C1]      FROM [CDA].[WorkFlow].[WorkFlowEvent] (nolock) AS [event]      WHERE        ([assignment].[WorkFlowAssignmentId] = [event].[WorkFlowAssignmentId])        AND ([event].[IsDeleted] <> 1)        AND (1 = [event].[ConditionSpecification]))) -- at least one new condition configured on the assignment   ),    -- Put the set of satisfied events for the trigger candidates into #SatisfiedEvents   SatisfiedEvents as (    Select sub.*     from (      SELECT      tc.WorkFlowAssignmentId,      gde.EventDate,      gde.GenericDataEventId,      wfe.WorkFlowEventId,      wfe.ConditionSpecification,      ROW_NUMBER() OVER (PARTITION BY wfe.WorkFlowEventId ORDER BY        -- This will break in aproximately 2075.       -- People of the future: change 2006-1-1 to something later       DATEDIFF(ss, '2006-1-1', gde.EventDate) * CASE WHEN wfe.ConditionSpecification = 1 THEN 1 ELSE -1 END        ) AS RowNumber     FROM TriggerCandidate tc     INNER JOIN CDA.WorkFlow.WorkFlowEvent (nolock) wfe ON wfe.WorkFlowAssignmentId = tc.WorkFlowAssignmentId     INNER JOIN CDA.dbo.vwGenericDataEvent (nolock) gde ON gde.TradingPartnerId = wfe.TradingPartnerId     WHERE     (wfe.ConditionSpecification = 2 OR NOT EXISTS (SELECT 1 FROM CDA.WorkFlow.WorkFlowEventExecution wfee WHERE wfee.GenericDataEventId = gde.GenericDataEventId AND wfee.WorkFlowEventId = wfe.WorkFlowEventId))     AND (wfe.FeedId IS NULL OR gde.DataFeedId = wfe.FeedId)     AND (       (wfe.Condition = 1 AND gde.Scheme = 'file' AND (wfe.ExpectedFeedDataId IS NULL OR EXISTS (SELECT 1 FROM CDA.dbo.vwGenericDataMappingUsage vgdmu WHERE vgdmu.GenericDataEventId = gde.GenericDataEventId AND vgdmu.ExpectedFeedDataId = wfe.ExpectedFeedDataId)))       OR       (wfe.Condition = 2 AND gde.Scheme = 'mssql' AND (wfe.DataModelId IS NULL OR gde.DataModelId = wfe.DataModelId))       )     AND wfe.IsDeleted = 0    ) sub    Where RowNumber = 1   )   -- derive the set of workflow assignments that have events that are not yet satisfied (so we can exclude them)     SELECT    p.Name ProductName    , tc.WorkFlowName    , tc.MemberName    , efd.Name FileConditionName    , gde.Location FileLocation    , tc.WorkflowID    , tc.WorkflowAssignmentID    , efd.ExpectedDataId    , feed.FeedId    , feed.TradingPartnerId   FROM TriggerCandidate tc   LEFT JOIN CDA.WorkFlow.WorkFlowEvent (nolock) e on e.WorkFlowAssignmentId = tc.WorkFlowAssignmentId   LEFT JOIN SatisfiedEvents se on se.WorkFlowEventId = e.WorkFlowEventId   LEFT JOIN CDA.SDP.GenericDataEvent (nolock) gde on se.GenericDataEventId=gde.GenericDataEventId   LEFT JOIN CDA.SDP.ExpectedFeedData (nolock) efd on e.ExpectedFeedDataId=efd.ExpectedDataId   LEFT JOIN CDA.Core.Feed (nolock) feed on efd.FeedId = feed.FeedId   LEFT JOIN CDA.Reference.Product p (nolock) on p.ProductId=tc.ProductId   WHERE 1=1    AND e.IsDeleted = 0   ORDER BY WorkFlowName    





select   a.FeedId   , a.Destination  , a.DateReceived  , a.Size  , a.RecordCreated  , a.ParsingStarted  , a.ParsingComplete ParsingCompletedDate  , a.TransmissionType  , a.TransmissionException  , a.TransmissionStatus  , a.TransmissionId from Core.Transmission (nolock) a  where 1=1  and a.TransmissionStatus in (   'Invalid'   ,'Invalid Sent for Parsing'   ,'No Match'   ,'Failed Expectations'   ,'Parsing Failed'   ,'Payload Activity Failed'   ,'Routing Failed'   ,'Shaping Failed'   ,'Feed Inactive'   ,'Registered'   ,'Sent for Parsing')  and a.FeedID is not null  and datediff(HOUR,a.DateReceived,getdate()) <= 72



select  coalesce('Workflow - '+w.WorkFlowName, mt.Displayname+' - '+coalesce(mr.SourceDatabaseName,filepath+'\'+[filename])+' TO '+coalesce(mr.TargetDatabaseName,filepath+'\'+[filename])) 'WorkflowName'  , coalesce(wfest.WorkFlowExecutionStatusDesc, mstat.displayname) 'Action Status'  , coalesce(ExecutionRequester,mr.requestinguser) 'Requester'  , dateadd(hh,-5,coalesce(wed.ExecutionStartTime, mr.requesteddatetime)) 'Workflow Start Date/Time'  , dateadd(hh,-5,coalesce(wed.ExecutionEndTime, mr.lastupdateddatetime)) 'Workflow End Date/Time'  , coalesce(DATEDIFF(mi,mr.RequestedDateTime,mr.StartedDateTime),0) 'Queued Time Length (min)'  , DATEDIFF(mi,coalesce(wed.ExecutionStartTime, mr.requesteddatetime),coalesce(wed.ExecutionEndTime, mr.lastupdateddatetime)) 'Workflow Execution Time(min)'  , DATEDIFF(mi,coalesce(mr.starteddatetime,wae.ExecutionStartTime),isnull(wae.ExecutionEndTime,isnull(mr.lastupdateddatetime,wae.ExecutionStartTime))) 'Action Execution Time Length (min)'  , coalesce(wa.WorkFlowActionName,mt.Displayname+' - '+coalesce(mr.SourceDatabaseName,filepath+'\'+[filename])+' TO '+coalesce(mr.TargetDatabaseName,filepath+'\'+[filename])) 'Action Name'  , wfat.WorkFlowActionTypeDesc  , coalesce(wfest2.WorkFlowExecutionStatusDesc, mstat.displayname) 'Workflow Status'  , isnull(wae.ExecutionException,'No errors!') 'Action Error Message'  , dateadd(hh,-5,coalesce(mr.requesteddatetime, wae.executionstarttime)) 'Action Request Time'  , dateadd(hh,-5,coalesce(mr.starteddatetime,wae.ExecutionStartTime)) 'Action Start Date/Time'  , dateadd(hh,-5,wae.ExecutionEndTime) 'Action End Date/Time'  , mr.SourceDatabaseName  , mr.TargetDatabaseName  , w.workflowid  , wa.WorkFlowActionId  , wae.WorkFlowActionExecutionId  , wed.WorkFlowExecutionDetailId  , mr.MigrationRequestId   from CDA.reference.product p join  CDA.workflow.workflow w on w.ProductId = p.productid and w.isdeleted = 0  left join CDA.workflow.workflowaction wa on wa.workflowid = w.workflowid and  wa.isdeleted = 0  left join CDA.workflow.WorkFlowActionExecution wae on wae.WorkFlowActionId = wa.WorkFlowActionId  left join CDA.workflow.WorkFlowExecutionDetail wed on wed.WorkflowExecutionDetailID = wae.WorkflowExecutionDetailID  left join CDA.reference.WorkFlowActionType wfat on wfat.WorkFlowActionTypeId = wae.WorkFlowActionType  left join CDA.reference.WorkFlowExecutionStatusType wfest on wfest.WorkFlowStatusType = wae.WorkFlowStatusType  left join CDA.reference.WorkFlowExecutionStatusType wfest2 on wfest2.WorkFlowStatusType = wed.WorkFlowStatusType  left join CDA.workflow.WorkFlowDatabaseTransferAction wdta on wdta.WorkFlowActionId = wa.WorkFlowActionId  full join CDA.[DataMigration].[MigrationRequest] mr on      wfat.WorkFlowActionTypeId = 10 and      mr.RequestingUser = 'Workflow "'+WorkFlowName+'" ('+cast((w.WorkFlowId-1) as nvarchar(255))+')('+cast(wed.WorkFlowExecutionDetailId as nvarchar(255))+')' and     wdta.SourceDatabaseName = mr.SourceDatabaseName and wdta.TargetDatabaseName = mr.TargetDatabaseName  left join CDA.reference.MigrationType mt on mt.migrationtypeid = mr.migrationtypeid  left join CDA.DataMigration.ArchiveFilePath afp on afp.FilePathId = mr.ArchiveFilePathId  left join CDA.reference.product p2 on p2.ProductId = mr.ProductId  left join CDA.reference.MigrationStatus mstat on mstat.MigrationStatusId = mr.MigrationStatusId  where 1=1 and coalesce(p.name,p2.name) = 'Crimson Medical Referrals' and datediff(dd,dateadd(hh,-5,coalesce(wed.ExecutionStartTime, mr.requesteddatetime)) ,getdate())<60  --and w.WorkFlowName = @WFName  order by coalesce(wed.ExecutionStartTime,mr.requesteddatetime) desc, [Action Start Date/Time] desc




SELECT TOP (1)   [Extent1].[LoadRequirementName] AS [LoadRequirementName],   [Extent1].[LoadRequirementID] AS [LoadRequirementID],   [Extent1].[LoadRequirementActive] AS [LoadRequirementActive],   [Extent1].[DestinationTable] AS [DestinationTable],   [Extent1].[Mandatory] AS [Mandatory],   [Extent1].[FileName] AS [FileName],   [Extent1].[FileDateTime] AS [FileDateTime],   [Extent1].[FileSize] AS [FileSize],   [Extent1].[Status] AS [Status],   [Extent1].[FileTypes] AS [FileTypes],   [Extent1].[ErrorMessage] AS [ErrorMessage],   [Extent1].[UploadedBy] AS [UploadedBy],   [Extent1].[LoadInstLoadReqMapID] AS [LoadInstLoadReqMapID],   [Extent1].[LoadInstanceID] AS [LoadInstanceID],   [Extent1].[Disabled] AS [Disabled],   [Extent1].[LoadOrder] AS [LoadOrder],   [Extent1].[LoadInstanceFileDetailsID] AS [LoadInstanceFileDetailsID],   [Extent1].[FileType] AS [FileType],   [Extent1].[MappingID] AS [MappingID],   [Extent1].[ClientID] AS [ClientID],   [Extent1].[Erroneous] AS [Erroneous],   [Extent1].[ProductID] AS [ProductID],   [Extent1].[ProductName] AS [ProductName],   [Extent1].[GroupId] AS [GroupId],   [Extent1].[LoadInstanceName] AS [LoadInstanceName],   [Extent1].[Description] AS [Description],   [Extent1].[NewMappingRequestID] AS [NewMappingRequestID],   [Extent1].[ApprovedStatus] AS [ApprovedStatus],   [Extent1].[FileExtracted] AS [FileExtracted],   [Extent1].[PreTruncate] AS [PreTruncate],   [Extent1].[ExtractFromJupiter] AS [ExtractFromJupiter],   [Extent1].[AllowFilesFromJupiter] AS [AllowFilesFromJupiter],   [Extent1].[OriginalFileName] AS [OriginalFileName],   [Extent1].[FilePath] AS [FilePath],   [Extent1].[ParentID] AS [ParentID]  FROM (SELECT  [vw_LoadInstanceDetails].[LoadInstanceFileDetailsID] AS [LoadInstanceFileDetailsID],  [vw_LoadInstanceDetails].[LoadRequirementName] AS [LoadRequirementName],  [vw_LoadInstanceDetails].[LoadRequirementID] AS [LoadRequirementID],  [vw_LoadInstanceDetails].[LoadRequirementActive] AS [LoadRequirementActive],  [vw_LoadInstanceDetails].[DestinationTable] AS [DestinationTable],  [vw_LoadInstanceDetails].[Mandatory] AS [Mandatory],  [vw_LoadInstanceDetails].[FileName] AS [FileName],  [vw_LoadInstanceDetails].[FileDateTime] AS [FileDateTime],  [vw_LoadInstanceDetails].[FileSize] AS [FileSize],  [vw_LoadInstanceDetails].[Status] AS [Status],  [vw_LoadInstanceDetails].[FileTypes] AS [FileTypes],  [vw_LoadInstanceDetails].[ErrorMessage] AS [ErrorMessage],  [vw_LoadInstanceDetails].[UploadedBy] AS [UploadedBy],  [vw_LoadInstanceDetails].[LoadInstLoadReqMapID] AS [LoadInstLoadReqMapID],  [vw_LoadInstanceDetails].[LoadInstanceID] AS [LoadInstanceID],  [vw_LoadInstanceDetails].[Disabled] AS [Disabled],  [vw_LoadInstanceDetails].[LoadOrder] AS [LoadOrder],  [vw_LoadInstanceDetails].[FileType] AS [FileType],  [vw_LoadInstanceDetails].[MappingID] AS [MappingID],  [vw_LoadInstanceDetails].[ClientID] AS [ClientID],  [vw_LoadInstanceDetails].[Erroneous] AS [Erroneous],  [vw_LoadInstanceDetails].[ProductID] AS [ProductID],  [vw_LoadInstanceDetails].[ProductName] AS [ProductName],  [vw_LoadInstanceDetails].[GroupId] AS [GroupId],  [vw_LoadInstanceDetails].[LoadInstanceName] AS [LoadInstanceName],  [vw_LoadInstanceDetails].[Description] AS [Description],  [vw_LoadInstanceDetails].[NewMappingRequestID] AS [NewMappingRequestID],  [vw_LoadInstanceDetails].[ApprovedStatus] AS [ApprovedStatus],  [vw_LoadInstanceDetails].[ExtractFromJupiter] AS [ExtractFromJupiter],  [vw_LoadInstanceDetails].[FileExtracted] AS [FileExtracted],  [vw_LoadInstanceDetails].[PostLoadFileName] AS [PostLoadFileName],  [vw_LoadInstanceDetails].[PreTruncate] AS [PreTruncate],  [vw_LoadInstanceDetails].[AllowFilesFromJupiter] AS [AllowFilesFromJupiter],  [vw_LoadInstanceDetails].[FilePath] AS [FilePath],  [vw_LoadInstanceDetails].[OriginalFileName] AS [OriginalFileName],  [vw_LoadInstanceDetails].[ParentID] AS [ParentID] FROM [dbo].[vw_LoadInstanceDetails] AS [vw_LoadInstanceDetails]) AS [Extent1]  WHERE [Extent1].[LoadInstanceFileDetailsID] = @p__linq__0



SELECT   [Extent1].[LoadRequirementName] AS [LoadRequirementName],   [Extent1].[LoadRequirementID] AS [LoadRequirementID],   [Extent1].[LoadRequirementActive] AS [LoadRequirementActive],   [Extent1].[DestinationTable] AS [DestinationTable],   [Extent1].[Mandatory] AS [Mandatory],   [Extent1].[FileName] AS [FileName],   [Extent1].[FileDateTime] AS [FileDateTime],   [Extent1].[FileSize] AS [FileSize],   [Extent1].[Status] AS [Status],   [Extent1].[FileTypes] AS [FileTypes],   [Extent1].[ErrorMessage] AS [ErrorMessage],   [Extent1].[UploadedBy] AS [UploadedBy],   [Extent1].[LoadInstLoadReqMapID] AS [LoadInstLoadReqMapID],   [Extent1].[LoadInstanceID] AS [LoadInstanceID],   [Extent1].[Disabled] AS [Disabled],   [Extent1].[LoadOrder] AS [LoadOrder],   [Extent1].[LoadInstanceFileDetailsID] AS [LoadInstanceFileDetailsID],   [Extent1].[FileType] AS [FileType],   [Extent1].[MappingID] AS [MappingID],   [Extent1].[ClientID] AS [ClientID],   [Extent1].[Erroneous] AS [Erroneous],   [Extent1].[ProductID] AS [ProductID],   [Extent1].[ProductName] AS [ProductName],   [Extent1].[GroupId] AS [GroupId],   [Extent1].[LoadInstanceName] AS [LoadInstanceName],   [Extent1].[Description] AS [Description],   [Extent1].[NewMappingRequestID] AS [NewMappingRequestID],   [Extent1].[ApprovedStatus] AS [ApprovedStatus],   [Extent1].[FileExtracted] AS [FileExtracted],   [Extent1].[PreTruncate] AS [PreTruncate],   [Extent1].[ExtractFromJupiter] AS [ExtractFromJupiter],   [Extent1].[AllowFilesFromJupiter] AS [AllowFilesFromJupiter],   [Extent1].[OriginalFileName] AS [OriginalFileName],   [Extent1].[FilePath] AS [FilePath],   [Extent1].[ParentID] AS [ParentID]  FROM (SELECT  [vw_LoadInstanceDetails].[LoadInstanceFileDetailsID] AS [LoadInstanceFileDetailsID],  [vw_LoadInstanceDetails].[LoadRequirementName] AS [LoadRequirementName],  [vw_LoadInstanceDetails].[LoadRequirementID] AS [LoadRequirementID],  [vw_LoadInstanceDetails].[LoadRequirementActive] AS [LoadRequirementActive],  [vw_LoadInstanceDetails].[DestinationTable] AS [DestinationTable],  [vw_LoadInstanceDetails].[Mandatory] AS [Mandatory],  [vw_LoadInstanceDetails].[FileName] AS [FileName],  [vw_LoadInstanceDetails].[FileDateTime] AS [FileDateTime],  [vw_LoadInstanceDetails].[FileSize] AS [FileSize],  [vw_LoadInstanceDetails].[Status] AS [Status],  [vw_LoadInstanceDetails].[FileTypes] AS [FileTypes],  [vw_LoadInstanceDetails].[ErrorMessage] AS [ErrorMessage],  [vw_LoadInstanceDetails].[UploadedBy] AS [UploadedBy],  [vw_LoadInstanceDetails].[LoadInstLoadReqMapID] AS [LoadInstLoadReqMapID],  [vw_LoadInstanceDetails].[LoadInstanceID] AS [LoadInstanceID],  [vw_LoadInstanceDetails].[Disabled] AS [Disabled],  [vw_LoadInstanceDetails].[LoadOrder] AS [LoadOrder],  [vw_LoadInstanceDetails].[FileType] AS [FileType],  [vw_LoadInstanceDetails].[MappingID] AS [MappingID],  [vw_LoadInstanceDetails].[ClientID] AS [ClientID],  [vw_LoadInstanceDetails].[Erroneous] AS [Erroneous],  [vw_LoadInstanceDetails].[ProductID] AS [ProductID],  [vw_LoadInstanceDetails].[ProductName] AS [ProductName],  [vw_LoadInstanceDetails].[GroupId] AS [GroupId],  [vw_LoadInstanceDetails].[LoadInstanceName] AS [LoadInstanceName],  [vw_LoadInstanceDetails].[Description] AS [Description],  [vw_LoadInstanceDetails].[NewMappingRequestID] AS [NewMappingRequestID],  [vw_LoadInstanceDetails].[ApprovedStatus] AS [ApprovedStatus],  [vw_LoadInstanceDetails].[ExtractFromJupiter] AS [ExtractFromJupiter],  [vw_LoadInstanceDetails].[FileExtracted] AS [FileExtracted],  [vw_LoadInstanceDetails].[PostLoadFileName] AS [PostLoadFileName],  [vw_LoadInstanceDetails].[PreTruncate] AS [PreTruncate],  [vw_LoadInstanceDetails].[AllowFilesFromJupiter] AS [AllowFilesFromJupiter],  [vw_LoadInstanceDetails].[FilePath] AS [FilePath],  [vw_LoadInstanceDetails].[OriginalFileName] AS [OriginalFileName],  [vw_LoadInstanceDetails].[ParentID] AS [ParentID] FROM [dbo].[vw_LoadInstanceDetails] AS [vw_LoadInstanceDetails]) AS [Extent1]  WHERE [Extent1].[ParentID] = @p__linq__0 OR [Extent1].[LoadInstanceFileDetailsID] = @p__linq__1



Inserts --- PLE 1064


<?query --
(@0 uniqueidentifier,@1 uniqueidentifier,@2 nvarchar(max) ,@3 nvarchar(max) ,@4 nvarchar(max) ,@5 bigint,@6 datetime2(7),@7 nvarchar(max) ,@8 datetime2(7),@9 bit,@10 uniqueidentifier,@11 int)DECLARE @generated_keys table([TransmissionId] uniqueidentifier)
INSERT [Core].[Transmission]([FeedId], [TradingPartnerId], [FileName], [Location], [Destination], [Checksum], [Size], [DateReceived], [FileCreatedDateTime], [TransmissionStatus], [TransmissionException], [RecordCreated], [ParsingStarted], [ParsingComplete], [ReprocessDate], [ProfileDate], [ShapedDate], [Duplicate], [ParentTransmissionId], [TransmissionType], [MDMDate], [UserId], [Direction])
OUTPUT inserted.[TransmissionId] INTO @generated_keys
VALUES (@0, @1, @2, @3, @4, NULL, @5, @6, NULL, @7, NULL, @8, NULL, NULL, NULL, NULL, NULL, @9, @10, NULL, NULL, NULL, @11)
SELECT t.[TransmissionId]
FROM @generated_keys AS g JOIN [Core].[Transmission] AS t ON g.[TransmissionId] = t.[TransmissionId]
WHERE @@ROWCOUNT > 0
--?>
